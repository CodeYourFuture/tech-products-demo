---
/resources:
  get:
    tags: [Resources]
    description: Get all resources.
    security:
      - authCookie: []
      - sudoToken: []
    parameters:
      - in: query
        name: draft
        description: |
          Filter resources by draft status.

          **Note**: drafts are only available to admin users or with SUDO token.
        schema:
          type: string
      - in: query
        name: page
        description: Which page of resources to fetch.
        schema:
          type: number
          minimum: 1
      - in: query
        name: perPage
        description: How many resources to include in each page.
        schema:
          type: number
          minimum: 1
    responses:
      200:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PaginatedResources"
      403:
        $ref: "#/components/responses/ForbiddenError"
      500:
        $ref: "#/components/responses/InternalServerError"
  post:
    tags: [Resources]
    description: Share a new resource.
    security:
      - authCookie: []
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ResourceCreation"
    responses:
      201:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Resource"
      400:
        $ref: "#/components/responses/BadRequestError"
      401:
        $ref: "#/components/responses/UnauthorizedError"
      409:
        allOf:
          - $ref: "#/components/responses/ConflictError"
          - description: A resource with the same name or URL already existed.
      500:
        $ref: "#/components/responses/InternalServerError"
/resources/{id}:
  patch:
    tags: [Resources]
    description: |
      Update an existing resource.

      **Note**: currently only supports publication, by admin user or with SUDO token.
    security:
      - authCookie: []
      - sudoToken: []
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
          format: uuid
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required: [status]
            properties:
              status:
                type: string
                example: "published"
    responses:
      200:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PublishedResource"
      400:
        $ref: "#/components/responses/BadRequestError"
      401:
        $ref: "#/components/responses/UnauthorizedError"
      404:
        $ref: "#/components/responses/NotFoundError"
      500:
        $ref: "#/components/responses/InternalServerError"
